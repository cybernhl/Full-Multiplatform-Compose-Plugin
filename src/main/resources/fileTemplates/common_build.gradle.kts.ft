plugins {
    kotlin("multiplatform")
    id("org.jetbrains.compose")
    #if (${HAS_ANDROID})
    id("com.android.library")
    #end
    #if (${HAS_IOS})
    kotlin("native.cocoapods")
    #end
}

val ktorVersion = extra["ktor.version"]
val koinVersion = extra["koin.version"]

group = "${PACKAGE_NAME}"
version = "1.0-SNAPSHOT"

@OptIn(org.jetbrains.compose.ExperimentalComposeLibrary::class)
kotlin {
#if (${HAS_ANDROID})
    androidTarget {
        compilations.all {
            kotlinOptions.jvmTarget = "11"
        }
    }
#end
#if (${HAS_DESKTOP})
    jvm("desktop") {
        compilations.all {
            kotlinOptions.jvmTarget = "11"
        }
    }
#end
#if (${HAS_WEB})
    js(IR) {
        browser()
    }
#end
#if (${HAS_IOS})
    ios()
    iosX64()
    iosArm64()
    iosSimulatorArm64()

    cocoapods {
        summary = "Some description for the Shared Module"
        homepage = "Link to the Shared Module homepage"
        version = "1.0"
        ios.deploymentTarget = "14.1"
        podfile = project.file("../iosApp/Podfile")
        framework {
            baseName = "${SHARED_NAME}"
            isStatic = true
        }
        extraSpecAttributes["resources"] = "['src/${SHARED_NAME}Main/resources/**', 'src/iosMain/resources/**']"
    }
#end
    sourceSets {
        val commonMain by getting {
            dependencies {
                api(compose.runtime)
                api(compose.ui)
                api(compose.foundation)
                api(compose.materialIconsExtended)
                #if (${USE_MATERIAL3})
                api(compose.material3)
                #else
                api(compose.material)
                #end

                #if (${USE_KTOR})
                implementation("io.ktor:ktor-client-core:$ktorVersion")
                #end

                #if (${USE_KOIN})
                implementation("io.insert-koin:koin-core:$koinVersion")
                #end
            }
        }

        val commonTest by getting {
            dependencies {
                implementation(kotlin("test"))
            }
        }

        #if (${HAS_ANDROID})
        val androidMain by getting {
            dependencies {
                api("androidx.appcompat:appcompat:${androidxAppCompat}")
                api("androidx.core:core-ktx:${androidxCore}")
                #if (${USE_KTOR})
                implementation("io.ktor:ktor-client-okhttp:$ktorVersion")
                #end
            }
        }
        #end

        #if (${HAS_DESKTOP})
        val desktopMain by getting {
            dependencies {
                api(compose.preview)
                #if (${USE_KTOR})
                implementation("io.ktor:ktor-client-okhttp:$ktorVersion")
                #end
            }
        }

        val desktopTest by getting
        #end

        #if (${HAS_WEB})
        val jsMain by getting {
            dependencies {
                api(compose.html.core)

                #if (${USE_KTOR})
                implementation("io.ktor:ktor-client-js:$ktorVersion")
                implementation("io.ktor:ktor-client-json-js:$ktorVersion")
                #end
            }
        }
        #end

        #if (${HAS_IOS})
        val iosX64Main by getting
        val iosArm64Main by getting
        val iosSimulatorArm64Main by getting
        val iosMain by getting {
            dependencies {
                #if (${USE_KTOR})
                implementation("io.ktor:ktor-client-darwin:$ktorVersion")
                #end
            }
            iosX64Main.dependsOn(this)
            iosArm64Main.dependsOn(this)
            iosSimulatorArm64Main.dependsOn(this)
        }
        #end
    }

    explicitApi()
}

#if (${HAS_ANDROID})
android {
    compileSdk = 33
    sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")
    defaultConfig {
        minSdk = ${MINSDK}
        targetSdk = 33
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
}
#end